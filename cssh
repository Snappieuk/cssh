#!/bin/bash

SCRIPT_NAME="cssh"
TARGET_PATH="/bin/$SCRIPT_NAME"

# Resolve absolute path of this script (so --deploy copies the real file)
if command -v readlink >/dev/null 2>&1; then
    SCRIPT_SRC="$(readlink -f "${BASH_SOURCE[0]}")"
else
    case "${BASH_SOURCE[0]}" in
        /*) SCRIPT_SRC="${BASH_SOURCE[0]}" ;;
        *)  SCRIPT_SRC="$PWD/${BASH_SOURCE[0]}" ;;
    esac
fi

# -------- node discovery (method 2) --------
get_nodes() {
  # Parse IPs from the "Membership information" section
  pvecm status 2>/dev/null | awk '
    /^Membership information/ {memb=1; next}
    memb && /^-+/ {next}                     # skip underline
    memb && /^[[:space:]]*Nodeid/ {next}     # skip header row
    memb && /^[[:space:]]*0x[0-9a-fA-F]+/ {
      gsub(/\(local\)/, "", $0)
      print $3
    }
  '
}

# Fallback to corosync.conf ring0_addr if needed
get_nodes_fallback() {
  [ -r /etc/pve/corosync.conf ] || return 0
  awk -F: '/ring0_addr:/ {gsub(/[[:space:]]/, "", $2); print $2}' /etc/pve/corosync.conf
}

nodes_raw="$(get_nodes)"
if [ -z "$nodes_raw" ]; then
  nodes_raw="$(get_nodes_fallback)"
fi
nodes="$(printf '%s\n' $nodes_raw | awk 'NF' | sort -u | xargs)"
local_node="$(hostname -I 2>/dev/null | awk '{print $1}')"

usage() {
  echo "Usage: $0 [--list] [--debug] [--deploy] [--parallel] [--] [command]"
}

# -------- parse our own flags and separate remote command --------
PARALLEL=0
DEPLOY=0
LIST=0
DEBUGF=0
REMOTE_CMD=()

while (( "$#" )); do
  case "$1" in
    --parallel) PARALLEL=1; shift ;;
    --deploy)   DEPLOY=1; shift ;;
    --list)     LIST=1; shift ;;
    --debug)    DEBUGF=1; shift ;;
    --)         shift; REMOTE_CMD=("$@"); break ;;
    --*)        REMOTE_CMD+=("$1"); shift ;; # unknown flag â†’ treat as remote cmd
    *)          REMOTE_CMD+=("$1"); shift ;;
  esac
done

# -------- handlers --------
if [[ $LIST -eq 1 ]]; then
  if [[ -z "$nodes" ]]; then
    echo "No nodes discovered."
    exit 1
  fi
  for n in $nodes; do echo "$n"; done
  exit 0
fi

if [[ $DEBUGF -eq 1 ]]; then
  echo "=== pvecm status ==="
  pvecm status || true
  echo
  echo "=== parsed nodes ==="
  if [[ -z "$nodes" ]]; then
    echo "(none)"
    exit 1
  fi
  for n in $nodes; do echo "$n"; done
  exit 0
fi

if [[ $DEPLOY -eq 1 ]]; then
  if [[ -z "$nodes" ]]; then
    echo "No nodes discovered. Aborting."
    exit 1
  fi
  echo "Deploying $SCRIPT_NAME to all nodes..."
  for node in $nodes; do
    if [[ -z "$node" || "$node" == "$local_node" ]]; then
      continue
    fi
    echo "-- Deploying to $node ----------------------------------------"
    scp "$SCRIPT_SRC" root@"$node":/tmp/$SCRIPT_NAME
    ssh root@"$node" "mv /tmp/$SCRIPT_NAME $TARGET_PATH && chmod +x $TARGET_PATH"
  done
  echo "Deployment complete."
  exit 0
fi

# Need nodes for any run
if [[ -z "$nodes" ]]; then
  echo "No nodes discovered. Aborting."
  exit 1
fi

# No remote command provided?
if [[ ${#REMOTE_CMD[@]} -eq 0 ]]; then
  usage
  exit 1
fi

if [[ $PARALLEL -eq 1 ]]; then
  echo "Running command in parallel across nodes..."
  for node in $nodes; do
    [[ -z "$node" ]] && continue
    echo "-- $node ----------------------------------------"
    ssh -T root@"$node" -- "${REMOTE_CMD[@]}" &
  done
  wait
  echo "Parallel execution complete."
  exit 0
fi

# Default: sequential execution
for node in $nodes; do
  [[ -z "$node" ]] && continue
  echo "-- $node ----------------------------------------"
  ssh -T root@"$node" -- "${REMOTE_CMD[@]}"
done
